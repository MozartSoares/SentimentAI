1. What is the title of your program?
SentimentAI 
(an AI-Based Sentiment Analysis for User Comments)

2. What real-world problem will your program address or help to solve?
This program will assist in analyzing and categorizing user comments as positive, negative, or neutral based on sentiment. It aims to help organizations, websites, or individuals process large amounts of feedback and extract insights about the overall sentiment of their users. This is particularly useful for businesses monitoring customer satisfaction, social media posts, or product reviews, enabling them to make informed decisions quickly.

3. What will you learn from developing this program?
From this project, I will learn:

How to build and train a machine learning model for natural language processing (NLP).
How to implement sentiment analysis using Python libraries.
The process of collecting and preparing data for AI model training.
How to evaluate and fine-tune machine learning models.
How to use Python to save and load trained models for later use without retraining.
How to use test functions to verify the accuracy and reliability of the model.
4. What Python modules will your program use?
The program will use the following Python modules:

pandas: For handling and manipulating datasets.
sklearn (from scikit-learn): For training machine learning models and evaluating performance.
requests: For collecting data from APIs if needed (like comment scraping from a website or review platform).
joblib: For saving and loading the trained model to avoid retraining.
nltk (Natural Language Toolkit): For tokenization, stopword removal, and basic text preprocessing.
matplotlib: For visualizing the sentiment distribution (Not sure if im going to include this feature, it depends on the project's complexity).
pytest: For testing the individual components of the program.

5. List the names of functions you will need?
Here’s a breakdown of the core functions that i plan to have in the program:

preprocess_text(text):

Purpose: Cleans and prepares text for sentiment analysis by removing stopwords, punctuation, and applying tokenization.
Input: A string (comment text).
Output: A cleaned version of the text.
train_model(X_train, y_train):

Purpose: Trains the machine learning model on a labeled dataset of comments.
Input: Training data (X_train), sentiment labels (y_train).
Output: A trained model.
predict_sentiment(model, comment):

Purpose: Predicts the sentiment of a single comment using the trained model.
Input: The trained model and the comment string.
Output: Sentiment prediction (positive/negative/neutral).
save_model(model, filename):

Purpose: Saves the trained model to a file so it can be reused without retraining.
Input: The trained model and the file name.
Output: None (writes the model to disk).
load_model(filename):

Purpose: Loads a previously trained model from a file.
Input: The filename of the saved model.
Output: The loaded model.
evaluate_model(model, X_test, y_test):

Purpose: Evaluates the model’s performance on test data and returns metrics (accuracy, precision, recall, etc.).
Input: The trained model, test data (X_test), and true labels (y_test).
Output: Performance metrics (like accuracy).
get_comments():

Purpose: Simulates or retrieves a list of comments for analysis (hardcoded or from an API).
Input: None.
Output: A list of comments.
display_insights(comments):

Purpose: Analyzes the sentiment of a batch of comments and returns insights (e.g., 70% positive, 20% negative, 10% neutral).
Input: A list of comments.
Output: Insights or statistics about the sentiment distribution.
6. List the names of the test functions you will write.
test_preprocess_text():

Tests that the text preprocessing removes unwanted characters and stopwords correctly.
test_train_model():

Verifies that the model is trained without errors and can make predictions.
test_predict_sentiment():

Ensures that the sentiment prediction function returns valid categories (positive/negative/neutral).
test_save_model():

Checks if the model is saved correctly to the specified file.
test_load_model():

Ensures that the model loads correctly and can still make accurate predictions after being saved and reloaded.
test_evaluate_model():

Confirms that the evaluation function returns correct accuracy and performance metrics.
test_display_insights():

Verifies that the insights function correctly calculates the distribution of sentiments in the dataset.